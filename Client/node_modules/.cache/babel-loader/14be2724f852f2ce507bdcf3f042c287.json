{"ast":null,"code":"import _objectSpread from \"F:\\\\Project\\\\FYP-project\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"F:\\\\Project\\\\FYP-project\\\\client\\\\src\\\\components\\\\Contents\\\\MapView.js\";\nimport React, { Component } from 'react';\nimport L from 'leaflet';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { Button } from 'reactstrap';\nimport Joi from 'joi';\nimport pin from '../../pinpoint.png';\nimport pin2 from '../../pinpoint2.png';\nimport './MapView.css';\nimport CardForm from './components/CardForm/CardForm';\nimport { getLocation, sendLocation } from '../../API';\nvar myIcon = L.icon({\n  iconUrl: pin,\n  iconSize: [30, 41],\n  iconAnchor: [12.5, 40],\n  popupAnchor: [0, -45]\n});\nvar myIcon2 = L.icon({\n  iconUrl: pin2,\n  iconSize: [30, 41],\n  iconAnchor: [12.5, 40],\n  popupAnchor: [0, -45]\n});\nconst schema = Joi.object().keys({\n  latitude: Joi.number().min(-90).max(90).required(),\n  longitude: Joi.number().min(-180).max(180).required()\n});\n\nclass MapView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      location: {\n        lat: 5.354482,\n        lng: 100.301226\n      },\n      haveUsersLocation: false,\n      zoom: 1,\n      userSetDest: {\n        slat: '',\n        slng: ''\n      },\n      locations: [],\n      showLocationForm: false,\n      sendingLocation: false,\n      sentLocation: false,\n      //sideDrawer \n      sideDrawerOpen: false\n    };\n\n    this.showLocationForm = () => {\n      this.setState({\n        showLocationForm: true\n      });\n    };\n\n    this.cancelLocation = () => {\n      this.setState({\n        showLocationForm: false\n      });\n    };\n\n    this.formIsValid = () => {\n      const userSetDest = {\n        latitude: this.state.userSetDest.slat,\n        longitude: this.state.userSetDest.slng\n      };\n      const result = Joi.validate(userSetDest, schema); //console.log(userSetDest);\n\n      return !result.error && userSetDest ? true : false;\n    };\n\n    this.formSubmitted = event => {\n      event.preventDefault(); //console.log(this.state.userSetDest);\n\n      if (this.formIsValid()) {\n        //if no error\n        this.setState({\n          sendingLocation: true\n        });\n        const dest = {\n          latitude: this.state.userSetDest.slat,\n          longitude: this.state.userSetDest.slng\n        };\n        sendLocation(dest).then(result => {\n          setTimeout(() => {\n            this.setState({\n              sendingLocation: false,\n              sentLocation: true\n            });\n          }, 4000);\n        });\n      }\n    };\n\n    this.valueChanged = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState(prevState => ({\n        userSetDest: _objectSpread({}, prevState.userSetDest, {\n          [name]: value\n        })\n      }));\n    };\n  }\n\n  // Get user geolocation and reconfigurate some attributes\n  componentDidMount() {\n    // Location from the database\n    getLocation().then(locations => {\n      this.setState({\n        locations,\n        haveUsersLocation: true,\n        zoom: 18\n      });\n    });\n  }\n\n  render() {\n    const position = [this.state.location.lat, this.state.location.lng];\n    const dest = this.state.locations[this.state.locations.length - 1];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Map, {\n      className: \"map\",\n      center: position,\n      zoom: this.state.zoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), this.state.haveUsersLocation ? React.createElement(Marker, {\n      position: position,\n      icon: myIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Popup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"lat:\", this.state.location.lat, \", lng:\", this.state.location.lng)) : \"\", this.state.locations.map(location => React.createElement(Marker, {\n      position: [dest.latitude, dest.longitude],\n      icon: myIcon2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Popup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"lat:\", dest.latitude, \", lng:\", dest.longitude)))), !this.state.showLocationForm ? React.createElement(Button, {\n      className: \"location-form\",\n      onClick: this.showLocationForm,\n      color: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Add a location\") : !this.state.sentLocation ? React.createElement(CardForm, {\n      cancelLocation: this.cancelLocation,\n      showLocationForm: this.state.showLocationForm,\n      sendingLocation: this.state.sendingLocation,\n      sentLocation: this.state.sentLocation,\n      haveUsersLocation: this.state.haveUsersLocation,\n      formSubmitted: this.formSubmitted,\n      valueChanged: this.valueChanged,\n      formIsValid: this.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }) : this.setState({\n      sentLocation: false,\n      showLocationForm: false\n    }));\n  }\n\n}\n\nexport default MapView;","map":{"version":3,"sources":["F:\\Project\\FYP-project\\client\\src\\components\\Contents\\MapView.js"],"names":["React","Component","L","Map","TileLayer","Marker","Popup","Button","Joi","pin","pin2","CardForm","getLocation","sendLocation","myIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","myIcon2","schema","object","keys","latitude","number","min","max","required","longitude","MapView","state","location","lat","lng","haveUsersLocation","zoom","userSetDest","slat","slng","locations","showLocationForm","sendingLocation","sentLocation","sideDrawerOpen","setState","cancelLocation","formIsValid","result","validate","error","formSubmitted","event","preventDefault","dest","then","setTimeout","valueChanged","target","name","value","prevState","componentDidMount","render","position","length","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport L from 'leaflet';\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport { Button } from 'reactstrap';\r\nimport Joi from 'joi';\r\nimport pin from '../../pinpoint.png'; \r\nimport pin2 from '../../pinpoint2.png'; \r\nimport './MapView.css';\r\nimport CardForm from './components/CardForm/CardForm';\r\nimport { getLocation, sendLocation } from '../../API';\r\n\r\nvar myIcon = L.icon({\r\n    iconUrl: pin,\r\n    iconSize: [30, 41],\r\n    iconAnchor: [12.5, 40],\r\n    popupAnchor: [0, -45],\r\n})\r\n  \r\nvar myIcon2 = L.icon({\r\n    iconUrl: pin2,\r\n    iconSize: [30, 41],\r\n    iconAnchor: [12.5, 40],\r\n    popupAnchor: [0, -45],\r\n})\r\n\r\nconst schema = Joi.object().keys({\r\n    latitude: Joi.number().min(-90).max(90).required(),\r\n    longitude: Joi.number().min(-180).max(180).required()\r\n});  \r\n\r\nclass MapView extends Component {\r\n\r\n    state = {\r\n        location: {\r\n          lat: 5.354482, \r\n          lng: 100.301226,\r\n        },\r\n        haveUsersLocation: false,\r\n        zoom: 1,\r\n        userSetDest: {\r\n          slat: '',\r\n          slng: '',\r\n        },\r\n        locations: [],\r\n        showLocationForm: false,\r\n        sendingLocation: false,\r\n        sentLocation: false,\r\n        //sideDrawer \r\n        sideDrawerOpen: false\r\n    };\r\n      \r\n    // Get user geolocation and reconfigurate some attributes\r\n    componentDidMount(){\r\n        // Location from the database\r\n        getLocation()\r\n            .then(locations => {\r\n                this.setState({\r\n                    locations,\r\n                    haveUsersLocation: true,\r\n                    zoom: 18\r\n                });\r\n            });\r\n    };\r\n    \r\n    showLocationForm = () => {\r\n        this.setState({\r\n        showLocationForm: true\r\n        });\r\n    }\r\n    \r\n    cancelLocation = () => {\r\n        this.setState({\r\n            showLocationForm: false\r\n        });\r\n    }\r\n    \r\n    formIsValid = () => {\r\n        const userSetDest = {\r\n            latitude: this.state.userSetDest.slat,\r\n            longitude: this.state.userSetDest.slng\r\n        };\r\n        const result = Joi.validate(userSetDest, schema);\r\n        //console.log(userSetDest);\r\n        return !result.error && userSetDest ? true : false;\r\n    };\r\n    \r\n    formSubmitted = (event) => {\r\n        event.preventDefault();\r\n        //console.log(this.state.userSetDest);\r\n        \r\n        if (this.formIsValid()){\r\n            //if no error\r\n            this.setState({\r\n                sendingLocation: true\r\n            });\r\n    \r\n        const dest = {\r\n            latitude: this.state.userSetDest.slat,\r\n            longitude: this.state.userSetDest.slng\r\n        };\r\n    \r\n        sendLocation(dest)\r\n            .then((result) => {\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                    sendingLocation: false,\r\n                    sentLocation: true\r\n                    });\r\n                }, 4000);\r\n            });\r\n        }\r\n    };\r\n    \r\n    valueChanged = (event) => {\r\n        const { name, value } = event.target; \r\n        this.setState((prevState) => ({\r\n            userSetDest: {\r\n                ...prevState.userSetDest,\r\n                [name]: value,\r\n            }\r\n        }))\r\n    };\r\n\r\n    render() {\r\n        const position = [this.state.location.lat, this.state.location.lng];\r\n        const dest = this.state.locations[this.state.locations.length-1];\r\n        return (\r\n            <div>\r\n                <Map className=\"map\" center={position} zoom={this.state.zoom}>\r\n                    <TileLayer\r\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    { \r\n                    this.state.haveUsersLocation ?\r\n                    <Marker \r\n                        position={position} \r\n                        icon={myIcon}>\r\n                        <Popup>\r\n                        lat:{this.state.location.lat}, lng:{this.state.location.lng}\r\n                        </Popup>\r\n                    </Marker> : \"\"\r\n                    }\r\n                    {this.state.locations.map(location => (\r\n                    <Marker \r\n                        position={[dest.latitude, dest.longitude]} \r\n                        icon={myIcon2}>\r\n                        <Popup>\r\n                        lat:{dest.latitude}, lng:{dest.longitude}\r\n                        </Popup>\r\n                    </Marker>\r\n                    ))} \r\n                </Map>\r\n                {\r\n                !this.state.showLocationForm ?\r\n                <Button className=\"location-form\" onClick={this.showLocationForm} color=\"info\">Add a location</Button> :\r\n                !this.state.sentLocation ?\r\n                <CardForm\r\n                    cancelLocation={this.cancelLocation}\r\n                    showLocationForm={this.state.showLocationForm}\r\n                    sendingLocation={this.state.sendingLocation}\r\n                    sentLocation={this.state.sentLocation}\r\n                    haveUsersLocation={this.state.haveUsersLocation}\r\n                    formSubmitted={this.formSubmitted}\r\n                    valueChanged={this.valueChanged}\r\n                    formIsValid={this.formIsValid}\r\n                /> :\r\n                this.setState({\r\n                    sentLocation: false,\r\n                    showLocationForm: false\r\n                })\r\n                } \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MapView;\r\n\r\n"]},"metadata":{},"sourceType":"module"}