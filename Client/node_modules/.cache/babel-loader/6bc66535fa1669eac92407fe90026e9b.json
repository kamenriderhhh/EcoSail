{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.render = exports.update = void 0;\n\nvar _d = require(\"d3\"),\n    _util = require(\"../util\"),\n    _getNeedleTransition = require(\"../util/get-needle-transition\"),\n    _configure = require(\"../config/configure\"),\n    update = function (a) {\n  var b = a.d3_refs,\n      c = a.newValue,\n      d = a.config,\n      e = (0, _configure.configureScale)(d),\n      f = e(c),\n      g = d.maxAngle - d.minAngle,\n      h = d.minAngle + f * g;\n  b.pointer.transition().duration(d.needleTransitionDuration).ease((0, _getNeedleTransition.getNeedleTransition)(d.needleTransition)).attr(\"transform\", \"rotate(\".concat(h, \")\")), b.current_value_text.text((0, _util.formatCurrentValueText)(c, d));\n};\n\nexports.update = update;\n\nvar render = function (a) {\n  var b = a.container,\n      c = a.config,\n      d = (0, _util.getRadius)(c),\n      e = (0, _util.centerTranslation)(d),\n      f = _renderSVG({\n    container: b,\n    config: c\n  });\n\n  return _renderArcs({\n    config: c,\n    svg: f,\n    centerTx: e\n  }), _renderLabels({\n    config: c,\n    svg: f,\n    centerTx: e,\n    r: d\n  }), {\n    current_value_text: _renderCurrentValueText({\n      config: c,\n      svg: f\n    }),\n    pointer: _renderNeedle({\n      config: c,\n      svg: f,\n      r: d,\n      centerTx: e\n    })\n  };\n};\n\nexports.render = render;\n\nfunction _renderSVG(a) {\n  var b = a.container,\n      c = a.config;\n  return (0, _d.select)(b).append(\"svg:svg\").attr(\"class\", \"speedometer\").attr(\"width\", c.width).attr(\"height\", c.height);\n}\n\nfunction _renderArcs(a) {\n  var b = a.config,\n      c = a.svg,\n      d = a.centerTx,\n      e = (0, _configure.configureTickData)(b),\n      f = (0, _configure.configureArc)(b),\n      g = c.append(\"g\").attr(\"class\", \"arc\").attr(\"transform\", d);\n  g.selectAll(\"path\").data(e).enter().append(\"path\").attr(\"class\", \"speedo-segment\").attr(\"fill\", function (a, c) {\n    return 0 === b.customSegmentStops.length ? b.arcColorFn(a * c) : b.segmentColors && b.segmentColors[c] ? b.segmentColors[c] : b.arcColorFn(a * c);\n  }).attr(\"d\", f);\n}\n\nfunction _renderLabels(a) {\n  var b = a.config,\n      c = a.svg,\n      d = a.centerTx,\n      e = a.r,\n      f = (0, _configure.configureTicks)(b),\n      g = (0, _configure.configureTickData)(b),\n      h = (0, _configure.configureScale)(b),\n      j = b.maxAngle - b.minAngle,\n      k = c.append(\"g\").attr(\"class\", \"label\").attr(\"transform\", d);\n  k.selectAll(\"text\").data(f).enter().append(\"text\").attr(\"transform\", function (a, c) {\n    var d = 0 === b.customSegmentStops.length ? h(a) : (0, _util.sumArrayTill)(g, c),\n        f = b.minAngle + d * j;\n    return \"rotate(\".concat(f, \") translate(0, \").concat(b.labelInset - e, \")\");\n  }).text(b.labelFormat).attr(\"class\", \"segment-value\").style(\"text-anchor\", \"middle\").style(\"font-size\", \"14px\").style(\"font-weight\", \"bold\").style(\"fill\", b.textColor);\n}\n\nfunction _renderCurrentValueText(a) {\n  var b = a.config,\n      c = a.svg;\n  return c.append(\"g\").attr(\"transform\", \"translate(\".concat(b.width / 2, \", \").concat(b.width / 2, \")\")).append(\"text\").attr(\"class\", \"current-value\").attr(\"text-anchor\", \"middle\").attr(\"y\", 23).text(b.currentValue || \"amaidhi\").style(\"font-size\", \"16px\").style(\"font-weight\", \"bold\").style(\"fill\", b.textColor);\n}\n\nfunction _renderNeedle(a) {\n  var b = a.config,\n      c = a.svg,\n      d = a.r,\n      e = a.centerTx,\n      f = (0, _util.calculateNeedleHeight)({\n    heightRatio: b.needleHeightRatio,\n    radius: d\n  }),\n      g = [[b.pointerWidth / 2, 0], [0, -f], [-(b.pointerWidth / 2), 0], [0, b.pointerTailLength], [b.pointerWidth / 2, 0]],\n      h = (0, _d.line)().curve(_d.curveMonotoneX),\n      i = c.append(\"g\").data([g]).attr(\"class\", \"pointer\").attr(\"transform\", e).style(\"fill\", b.needleColor);\n  return i.append(\"path\").attr(\"d\", h).attr(\"transform\", \"rotate(\".concat(b.minAngle, \")\"));\n}","map":null,"metadata":{},"sourceType":"script"}